# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

outputs = terraform_outputs(dir: File.expand_path("../../../..", File.dirname(__FILE__)))

control 'project-factory' do
  title 'Project Factory intrinsics'

  describe outputs do
    # Confirm that the terraform outputs exist and can be loaded before continuing
    it { should exist }

    its('project_id') { should_not be_nil }
  end

  describe command("gcloud projects describe #{outputs.project_id}") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }
  end

  describe command("gcloud services list --project #{outputs.project_id}") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    its('stdout') { should match(/compute\.googleapis\.com/) }
    its('stdout') { should match(/container\.googleapis\.com/) }
  end

  describe command("gcloud iam service-accounts list --project #{outputs.project_id} --format='json(email)'") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    let(:service_accounts) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout).map { |entry| entry["email"] }
      else
        []
      end
    end

    it "includes the Google App Engine API service account user" do
      service_accounts.should include "#{outputs.project_id}@appspot.gserviceaccount.com"
    end

    it "includes the service account generated by the project factory" do
      service_accounts.should include outputs.service_account_email
    end

    it "includes the service account created outside of the project factory" do
      service_accounts.should include outputs.extra_service_account_email
    end
  end
end

control 'project-factory-sa-role' do
  title "Project factory service account role"

  only_if { attribute('sa_role') }

  describe command("gcloud projects get-iam-policy #{outputs.project_id} --format=json") do
    its('exit_status') { should eq 0 }
    its('stderr') { should eq '' }

    let(:bindings) do
      if subject.exit_status == 0
        JSON.load(subject.stdout)['bindings']
      else
        []
      end
    end

    it "does not overwrite the membership of the service account role" do
      binding = bindings.find { |b| b['role'] == attribute('sa_role') }
      binding.should_not be_nil

      binding['members'].should include "serviceAccount:#{outputs.extra_service_account_email}"
      binding['members'].should include "serviceAccount:#{outputs.service_account_email}"
    end
  end
end

control 'project-factory-usage' do
  title "Project factory usage bucket"

  only_if { attribute('usage_bucket_name') }

  describe command("gcloud compute project-info describe --project #{outputs.project_id} --format='json(usageExportLocation)'") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    let(:usage) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout)["usageExportLocation"]
      else
        {}
      end
    end

    let(:prefix) do
      attribute('usage_bucket_prefix') || "usage-#{outputs.project_id}"
    end

    it "exports usage to the provided bucket" do
      usage["bucketName"].should eq attribute('usage_bucket_name')
    end

    it "exports usage to the appropriate prefix" do
      usage["reportNamePrefix"].should eq attribute('usage_bucket_prefix')
    end
  end
end
