# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

extra_service_account_email   = attribute('extra_service_account_email')
compute_service_account_email = attribute('compute_service_account_email')
project_name                  = attribute('project_name')
project_id                    = attribute('project_id')
sa_role                       = attribute('sa_role')
service_account_email         = attribute('service_account_email')
usage_bucket_name             = attribute('usage_bucket_name')
usage_bucket_prefix           = attribute('usage_bucket_prefix')

# Set a reasonable default value for `usage_bucket_prefix` if the Terraform
# provided value is empty.
usage_bucket_prefix = "usage-#{project_id}" if usage_bucket_prefix.empty?

control 'project-factory' do
  title 'Project Factory'

  describe command("gcloud projects describe #{project_id} --format=json") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    let(:metadata) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout, symbolize_names: true)
      else
        {}
      end
    end

    it { expect(metadata).to include(name: project_name) }
    it { expect(metadata).to include(projectId: project_id) }
  end

  describe command("gcloud services list --project #{project_id}") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    its('stdout') { should match(/compute\.googleapis\.com/) }
    its('stdout') { should match(/container\.googleapis\.com/) }
  end

  describe command("gcloud iam service-accounts list --project #{project_id} --format='json(email)'") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    let(:service_accounts) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout, symbolize_names: true).map { |entry| entry[:email] }
      else
        []
      end
    end

    it "includes the service account generated by the project factory" do
      expect(service_accounts).to include service_account_email
    end

    it "includes the service account created outside of the project factory" do
      expect(service_accounts).to include extra_service_account_email
    end

    it "does not include the default compute service account" do
      expect(service_accounts).not_to include compute_service_account_email
    end
  end

  describe command("gcloud alpha resource-manager liens list --project #{project_id} --format=json") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    let(:liens) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout, symbolize_names: true)
      else
        []
      end
    end

    it "has one lien" do
      expect(liens.count).to eq 1
    end

    it "sets the lien origin" do
      expect(liens.first).to include(origin: 'project-factory')
    end

    it "sets the lien reason" do
      expect(liens.first).to include(reason: 'Project Factory lien')
    end

    it "restricts the delete permission on the project" do
      expect(liens.first).to include(restrictions: ['resourcemanager.projects.delete'])
    end
  end
end

control 'project-factory-sa-role' do
  title "Project factory service account role"

  describe command("gcloud projects get-iam-policy #{project_id} --format=json") do
    its('exit_status') { should eq 0 }
    its('stderr') { should eq '' }

    let(:bindings) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout, symbolize_names: true)[:bindings]
      else
        []
      end
    end

    it "does not overwrite the membership of role #{sa_role.inspect} when adding the project service account" do
      expect(bindings).to include(
        members: including(
          "serviceAccount:#{extra_service_account_email}",
          "serviceAccount:#{service_account_email}"
        ),
        role: sa_role,
      )
    end
  end
end

control 'project-factory-usage' do
  title "Project factory usage bucket"

  only_if { !(usage_bucket_name.nil? || usage_bucket_name.empty?) }

  describe command("gcloud compute project-info describe --project #{project_id} --format='json(usageExportLocation)'") do
    its('exit_status') { should be 0 }
    its('stderr') { should eq '' }

    let(:usage) do
      if subject.exit_status == 0
        JSON.parse(subject.stdout, symbolize_names: true)[:usageExportLocation]
      else
        {}
      end
    end

    it { expect(usage).to include(bucketName: usage_bucket_name) }
    it { expect(usage).to include(reportNamePrefix: usage_bucket_prefix) }
  end
end
